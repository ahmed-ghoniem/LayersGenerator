<Model>
  <ModelNameSpace>Model</ModelNameSpace>
  <Items>
    <Item>
      <FolderName>Models</FolderName>
      <NameSpace>Models</NameSpace>
      <Class>
        using System.Collections.Generic;
        namespace {NameSpace}
        {
        public class {ModelName} : {BaseModelName}
        {
        public {PKType} {ModelName}ID { get; set; }

        public {ModelName}()
        {
        }
        }
        }
      </Class>
    </Item>
    <Item>
      <FolderName>DTO</FolderName>
      <NameSpace>DTO</NameSpace>
      <Suffix>DTO</Suffix>
      <Class>
        using System.Collections.Generic;
        namespace {NameSpace}
        {
        public class {ModelName}DTO
        {
        public {PKType} {ModelName}ID { get; set; }

        public {ModelName}DTO()
        {
        }
        }
        }
      </Class>
    </Item>
    <Item>
      <FolderName>Configuration</FolderName>
      <NameSpace>Data.Configuration</NameSpace>
      <Suffix>Configuration</Suffix>
      <Prefix></Prefix>
      <Class>
        using {ModelNameSpace};
        using Microsoft.EntityFrameworkCore;
        using Microsoft.EntityFrameworkCore.Metadata.Builders;

        namespace {NameSpace}
        {
        public class {ModelName}Configuration: IEntityTypeConfiguration&lt;{ModelName}&gt;
        {
        public void Configure(EntityTypeBuilder&lt;{ModelName}&gt; builder)
        {
        }
        }
        }
      </Class>
    </Item>
    <Item>
      <FolderName>Repositories\\Repositories</FolderName>
      <NameSpace>Repositories</NameSpace>
      <Suffix>Repository</Suffix>
      <Prefix></Prefix>
      <Class>
        using System.Collections.Generic;
        using Data.Infrastructure;
        using Helpers;
        using System.Linq;
        using {ModelNameSpace};

        namespace {NameSpace}
        {
        public class {ModelName}Repository : BaseRepository&lt;{ModelName}&gt;, I{ModelName}Repository
        {
        public {ModelName}Repository(IDbFactory dbFactory, SecurityHelper securityHelper) : base(dbFactory,securityHelper)
        {
        }
        }
        }
      </Class>
    </Item>
    <Item>
      <FolderName>Repositories\\Contracts</FolderName>
      <NameSpace>Repositories</NameSpace>
      <Suffix>Repository</Suffix>
      <Prefix>I</Prefix>
      <Class>
        using System.Collections.Generic;
        using Data.Infrastructure;
        using {ModelNameSpace};

        namespace {NameSpace}
        {
        public interface I{ModelName}Repository : IRepository&lt;{ModelName}&gt;
        {
        }
        }

      </Class>
    </Item>
    <Item>
      <FolderName>Services\\Contracts</FolderName>
      <NameSpace>Services</NameSpace>
      <Suffix>Service</Suffix>
      <Prefix>I</Prefix>
      <Class>
        using {ModelNameSpace};
        using System.Collections.Generic;

        namespace {NameSpace}
        {
        public interface I{ModelName}Service
        {
        List&lt;{ModelName}&gt; GetAll();
        {ModelName} Get{ModelName}(int id);
        void Create{ModelName}({ModelName} {instanceModel});
        void Update{ModelName}({ModelName} {instanceModel});
        void Delete{ModelName}({ModelName} {instanceModel});
        void Save{ModelName}();
        }
        }

      </Class>
    </Item>
    <Item>
      <FolderName>Services\\Services</FolderName>
      <NameSpace>Services</NameSpace>
      <Suffix>Service</Suffix>
      <Prefix></Prefix>
      <Class>
        using Data.Infrastructure;
        using Repositories;
        using {ModelNameSpace};
        using System.Collections.Generic;
        using System.Linq;

        namespace {NameSpace}
        {
        public class {ModelName}Service : I{ModelName}Service
        {
        private readonly I{ModelName}Repository _{instanceModel}Repository;
        private readonly IUOW _unitOfWork;

        public {ModelName}Service(I{ModelName}Repository {instanceModel}Repository,IUOW unitOfWork)
        {
        _{instanceModel}Repository = {instanceModel}Repository;
        _unitOfWork = unitOfWork;
        }

        public List&lt;{ModelName}&gt; GetAll()
        {
        List&lt;{ModelName}&gt; {ModelNamePluralized} = _{instanceModel}Repository.GetAll();
        return {ModelNamePluralized};
        }

        public {ModelName} Get{ModelName}(int id)
        {
        {ModelName} {instanceModel} = _{instanceModel}Repository.GetById(id);
        return {instanceModel};
        }
        public void Create{ModelName}({ModelName} {instanceModel})
        {
        _{instanceModel}Repository.Add({instanceModel});
        }

        public void Update{ModelName}({ModelName} {instanceModel})
        {
        _{instanceModel}Repository.Update({instanceModel}.{ModelName}ID, {instanceModel});
        }

        public void Delete{ModelName}({ModelName} {instanceModel})
        {
        _{instanceModel}Repository.Delete({instanceModel});
        }

        public void Save{ModelName}()
        {
         _unitOfWork.Commit();
        }
        }
        }
      </Class>
    </Item>
    <Item>
      <FolderName>Controllers</FolderName>
      <NameSpace>PristineAPI.Controllers</NameSpace>
      <Suffix>Controller</Suffix>
      <Prefix></Prefix>
      <Class>
        using AutoMapper;
        using DTO;
        using Helpers;
        using Infrastructure;
        using Microsoft.AspNetCore.Mvc;
        using Model;
        using Model.DTOs;
        using Services;
        using Swashbuckle.AspNetCore.Annotations;
        using System;
        using System.Collections.Generic;


        namespace {NameSpace}
        {
        public class {ModelName}Controller : BaseController
        {
        private readonly SecurityHelper _securityHelper;
        private readonly IMapper _mapper;
        private readonly IUOW _unitOfWork;
        private readonly I{ModelName}Service _{instanceModel}Service;

        public {ModelName}Controller(I{ModelName}Service {instanceModel}Service,IUOW unitOfWork , IMapper mapper)
        {
        _{instanceModel}Service = {instanceModel}Service;
        _unitOfWork = unitOfWork;
        _mapper = mapper;
        }

        [HttpGet("{id}")]
        [SwaggerResponse(statusCode: 200, type: typeof(APIResultDTO&lt;{ModelName}DTO&gt;))]
        public IActionResult Get{ModelName}(int id)
        {
        APIResultDTO apiResult = new APIResultDTO();
        apiResult.Data =  _{instanceModel}Service.Get{ModelName}(id);
        return Ok(apiResult);
          }

        [HttpGet("Get{ModelNamePluralized}")]
        [SwaggerResponse(statusCode: 200, type: typeof(APIResultDTO&lt;List&lt;{ModelName}DTO&gt;&gt;))]
        public IActionResult Get{ModelNamePluralized}()
        {
            APIResultDTO apiResult = new APIResultDTO();
            apiResult.Data = _{instanceModel}Service.GetAll();
            return Ok(apiResult);
        }

        [HttpPost]
        [SwaggerResponse(statusCode: 200, type: typeof(APIResultDTO&lt;{ModelName}DTO&gt;))]
        public IActionResult Post{ModelName}([FromBody] {ModelName} {instanceModel})
        {
            APIResultDTO apiResult = new APIResultDTO();

            if (ModelState.IsValid)
            {
                _{instanceModel}Service.Create{ModelName}({instanceModel});
                _{instanceModel}Service.SaveChanges();
                apiResult.Data = {instanceModel};
            }
            else
            {
                SetValidationErrors(apiResult);
            }

            return Ok(apiResult);
        }


        [HttpPut("{id}")]
        [SwaggerResponse(statusCode: 200, type: typeof(APIResultDTO&lt;{ModelName}DTO&gt;))]
        public IActionResult Put{ModelName}(int id, [FromBody] {ModelName} {instanceModel})
        {
            APIResultDTO apiResult = new APIResultDTO();

            if (ModelState.IsValid)
            {
                try
                {
                    _{instanceModel}Service.Update{ModelName}({instanceModel});
                    _{instanceModel}Service.SaveChanges();
                }
                catch (Exception ex)
                {
                    if (!{ModelName}Exists(id))
                    {
                        apiResult.AddError("Not found");
                    }
                    else
                    {
                        apiResult.AddError(ex.Message);
                    }
                }
            }
            else
            {
                SetValidationErrors(apiResult);
            }


            return Ok(apiResult);
        }

        [HttpDelete("{id}")]
        [SwaggerResponse(statusCode: 200, type: typeof(APIResultDTO&lt;{ModelName}DTO&gt;))]
        public IActionResult Delete{ModelName}(int id)
        {
            APIResultDTO apiResult = new APIResultDTO();

        {ModelName} {instanceModel} = _{instanceModel}Service.Get{ModelName}(id);
            if ({instanceModel} != null)
            {
                apiResult.Data = {instanceModel};
                _{instanceModel}Service.Delete{ModelName}({instanceModel});
                _{instanceModel}Service.SaveChanges();
            }
            else
            {
                apiResult.AddError("{ModelName} Not Found");
            }
            return Ok(apiResult);
        }

        private bool {ModelName}Exists(int id)
        {
        {ModelName} {instanceModel} = _{instanceModel}Service.Get{ModelName}(id);
            return {instanceModel} != null;
        }

        }
        }
      </Class>
    </Item>
  </Items>
</Model>